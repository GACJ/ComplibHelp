{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Composition Library Help Composition Library is an interactive tool for all change ringers, not just conductors and composers. It is intended to act as a comprehensive reference for methods and compositions and has a number of useful features. For example, you can: Search for existing methods and compositions by name , title , or a large number of other criteria; Display the blue line of methods or compositions, as well as other detailed information; Find compositions which are true to a particular method , or methods which are true to a particular composition via an extended search . By registering for an account, you will also gain the ability to contribute material to the Composition Library. For example, you can: Define new compositions and methods. Create collections of methods or compositions (e.g. your personal favourites, or the hottest new 23-spliced). Ask questions, raise issues and request bespoke compositions from other Complib users. Using the Help You can navigate this website using the sidebar: simply click on the section or subsection you'd like to read. Alternatively, you can look for help on a specific topic using the search feature. For more information about the Help, or to raise an issue, please refer to the About section. A Note on Terminology The change ringing terms used in this documentation are those specified in the Central Council's Framework for Method Ringing , and many of them are common parlance within the Exercise. It is assumed for the purposes of using the Help that you are familiar with at least some of this language. In order to be as clear as possible, definitions have been included where it is felt this might aid understanding of a particular topic. However, in the interests of brevity, this documentation does not attempt to give precise definitions for every piece of terminology. The Central Council Framework deals primarily with methods. By contrast, there is currently no technical specification for terminology relating to compositions. As such, greater priority has been given to defining all important compositional terms within the Help itself.","title":"Introduction"},{"location":"#composition-library-help","text":"Composition Library is an interactive tool for all change ringers, not just conductors and composers. It is intended to act as a comprehensive reference for methods and compositions and has a number of useful features. For example, you can: Search for existing methods and compositions by name , title , or a large number of other criteria; Display the blue line of methods or compositions, as well as other detailed information; Find compositions which are true to a particular method , or methods which are true to a particular composition via an extended search . By registering for an account, you will also gain the ability to contribute material to the Composition Library. For example, you can: Define new compositions and methods. Create collections of methods or compositions (e.g. your personal favourites, or the hottest new 23-spliced). Ask questions, raise issues and request bespoke compositions from other Complib users.","title":"Composition Library Help"},{"location":"#using-the-help","text":"You can navigate this website using the sidebar: simply click on the section or subsection you'd like to read. Alternatively, you can look for help on a specific topic using the search feature. For more information about the Help, or to raise an issue, please refer to the About section.","title":"Using the Help"},{"location":"#a-note-on-terminology","text":"The change ringing terms used in this documentation are those specified in the Central Council's Framework for Method Ringing , and many of them are common parlance within the Exercise. It is assumed for the purposes of using the Help that you are familiar with at least some of this language. In order to be as clear as possible, definitions have been included where it is felt this might aid understanding of a particular topic. However, in the interests of brevity, this documentation does not attempt to give precise definitions for every piece of terminology. The Central Council Framework deals primarily with methods. By contrast, there is currently no technical specification for terminology relating to compositions. As such, greater priority has been given to defining all important compositional terms within the Help itself.","title":"A Note on Terminology"},{"location":"about/","text":"About the Help The Composition Library, or Complib, is a powerful resource offering a wide array of features to its users. An unfortunate downside is that the website can be unintuitive to use. Our hope is that this documentation can help you get to grips with Complib and how it works. Giving feedback The Composition Library is a work-in-progress, and the Help contained here is no different. You can provide feedback on the Help via Complib's Issues page. When raising a help-specific issue, please use the dedicated Documentation issue type, as that will allow us to deal with it separately from issues specific to Complib itself. When to raise an issue If... you encounter a problem when using the Help; you notice something about the Help which doesn't seem correct (and you're reasonably sure); you have feedback about a section of the Help which is unclear or could be expanded upon (and you have reason to believe that this isn't being done already); you have feedback about the way the Help is structured; then these are good reasons to raise an issue. When not to raise an issue There are certain circumstances under which we would ask you not to raise an issue. Change ringing is an art with a very long history, and its technical aspects have been subject to constant development within the change ringing community for centuries. Complib is intended to serve the needs of change ringing as it is currently practised . To this end, both Complib and the Help reflect the current Central Council Framework for Method Ringing wherever possible. Neither Complib itself nor this Help documentation are designed to act as fora for debate on the details of the current Framework, nor indeed should they. Such debate is a crucial part of change ringing culture, but this is not the appropriate place for it.","title":"About"},{"location":"about/#about-the-help","text":"The Composition Library, or Complib, is a powerful resource offering a wide array of features to its users. An unfortunate downside is that the website can be unintuitive to use. Our hope is that this documentation can help you get to grips with Complib and how it works.","title":"About the Help"},{"location":"about/#giving-feedback","text":"The Composition Library is a work-in-progress, and the Help contained here is no different. You can provide feedback on the Help via Complib's Issues page. When raising a help-specific issue, please use the dedicated Documentation issue type, as that will allow us to deal with it separately from issues specific to Complib itself.","title":"Giving feedback"},{"location":"about/#when-to-raise-an-issue","text":"If... you encounter a problem when using the Help; you notice something about the Help which doesn't seem correct (and you're reasonably sure); you have feedback about a section of the Help which is unclear or could be expanded upon (and you have reason to believe that this isn't being done already); you have feedback about the way the Help is structured; then these are good reasons to raise an issue.","title":"When to raise an issue"},{"location":"about/#when-not-to-raise-an-issue","text":"There are certain circumstances under which we would ask you not to raise an issue. Change ringing is an art with a very long history, and its technical aspects have been subject to constant development within the change ringing community for centuries. Complib is intended to serve the needs of change ringing as it is currently practised . To this end, both Complib and the Help reflect the current Central Council Framework for Method Ringing wherever possible. Neither Complib itself nor this Help documentation are designed to act as fora for debate on the details of the current Framework, nor indeed should they. Such debate is a crucial part of change ringing culture, but this is not the appropriate place for it.","title":"When not to raise an issue"},{"location":"concepts/","text":"Core Concepts Methods, Compositions and Collections The three main concepts underpinning Complib are methods , compositions and collections . Complib has a dedicated page for every method in its various libraries , including all those which have been officially named and rung. Complib allows you to quickly look up the blue line and rows of a method, as well as anything else you might want to know about it. In addition, Complib allows users to define their own methods using place notation . Complib contains a large number of compositions , which are specified callings for a performance. These range in scope from simple practice-night touches to full peals and long lengths. Users can search for compositions fitting various criteria, publish compositions of their own , and rate their favourites. You can even request compositions from other users. Collections are as their name suggests: collections of methods, compositions or both. They are a convenient way to organise information in one place, with links to the relevant Complib pages. See also For more information on methods , compositions and collections , please refer to the relevant section. The Libraries Methods, compositions and collections on Complib are contained in one or more designated libraries , of which there are four: CCCBR A method-specific library. Contains all methods officially named and rung in compliance with the Central Council Framework for Method Ringing . This library is maintained by the Central Council's Technical & Taxonomy Workgroup. Provisional A method-specific library. Contains methods that, at the time they were named and rung, did not qualify for inclusion in the Central Council's Methods Library, but which may become eligible in future. Methods in the provisional library have a visual indicator on their method page to help identify them. Public Contains any methods, compositions or collections which have been published by Complib users. Private Contains any methods, compositions or collections which have been added to Complib but not yet published. Note A method, composition or collection in the Private library is only visible to its owner, or to others viewing via a special link generated by the owner (see Sharing private methods via link ). When performing a regular search of Complib, results will be displayed from all four of these libraries by default. However, it is possible to limit the results to those from a specific library. For more information, please see the section on Searching Complib .","title":"Core concepts"},{"location":"concepts/#core-concepts","text":"","title":"Core Concepts"},{"location":"concepts/#methods-compositions-and-collections","text":"The three main concepts underpinning Complib are methods , compositions and collections . Complib has a dedicated page for every method in its various libraries , including all those which have been officially named and rung. Complib allows you to quickly look up the blue line and rows of a method, as well as anything else you might want to know about it. In addition, Complib allows users to define their own methods using place notation . Complib contains a large number of compositions , which are specified callings for a performance. These range in scope from simple practice-night touches to full peals and long lengths. Users can search for compositions fitting various criteria, publish compositions of their own , and rate their favourites. You can even request compositions from other users. Collections are as their name suggests: collections of methods, compositions or both. They are a convenient way to organise information in one place, with links to the relevant Complib pages. See also For more information on methods , compositions and collections , please refer to the relevant section.","title":"Methods, Compositions and Collections"},{"location":"concepts/#the-libraries","text":"Methods, compositions and collections on Complib are contained in one or more designated libraries , of which there are four: CCCBR A method-specific library. Contains all methods officially named and rung in compliance with the Central Council Framework for Method Ringing . This library is maintained by the Central Council's Technical & Taxonomy Workgroup. Provisional A method-specific library. Contains methods that, at the time they were named and rung, did not qualify for inclusion in the Central Council's Methods Library, but which may become eligible in future. Methods in the provisional library have a visual indicator on their method page to help identify them. Public Contains any methods, compositions or collections which have been published by Complib users. Private Contains any methods, compositions or collections which have been added to Complib but not yet published. Note A method, composition or collection in the Private library is only visible to its owner, or to others viewing via a special link generated by the owner (see Sharing private methods via link ). When performing a regular search of Complib, results will be displayed from all four of these libraries by default. However, it is possible to limit the results to those from a specific library. For more information, please see the section on Searching Complib .","title":"The Libraries"},{"location":"advanced/extensions/","text":"","title":"Extensions"},{"location":"advanced/fch_groups/","text":"","title":"False coursehead (FCH) groups"},{"location":"advanced/leadhead_codes/","text":"","title":"Leadhead codes"},{"location":"advanced/row_parity/","text":"","title":"Row parity"},{"location":"collections/adding_collections/","text":"","title":"Adding collections"},{"location":"collections/overview/","text":"","title":"Overview"},{"location":"compositions/adding_compositions/","text":"","title":"Adding compositions"},{"location":"compositions/layout_options/","text":"","title":"Customising composition layouts"},{"location":"compositions/overview/","text":"Composition Pages As its name suggests, Complib has been designed as a library for change ringing compositions . In the most general terms, a composition is a specified calling for a change ringing performance. A composition is stored in Complib as this calling, together with specified method(s) for which it has been designed. Complib automatically pricks (i.e. generates the rows of) any composition when it is entered in order to establish its truth . Stored compositions are then given their own dedicated page, which has a number of expandable tabs: Layout The human-readable form of the composition. Users can adjust the form and style of the layout to suit a wide variety of needs and preferences (see Customising composition layouts ). Blue Line The pricked rows of the composition, with (or without) an overlaid blue line. Music Score The music score breakdown of the composition with respect to a specified music scheme . Users can use one of the default schemes (including for half-muffled ringing), or specify their own. Handbell Positions A table specifying which positions each handbell pair rings during the composition, as well as the number of leads rung (if applicable) and their relative prevalence. Properties The technical features of the composition, such as its length , number of parts , whether it is all-the-work , and more. Related Compositions A list of all compositions which are related to the current one, i.e., because they are related by some transformation such as rotation or reversal, or because they have the same calling but different specified methods. Performances Historical information about occasions when the composition has been performed, with links to the relevant Bellboard page. References A list of all accessible collections containing the current composition. If you own a private collection containing the composition, it will be included here. Library Details Information pertaining to the composition's Complib entry, including which library it is contained in, the corresponding Composition Id , any Notes included by the publisher, etc.","title":"Composition pages"},{"location":"compositions/overview/#composition-pages","text":"As its name suggests, Complib has been designed as a library for change ringing compositions . In the most general terms, a composition is a specified calling for a change ringing performance. A composition is stored in Complib as this calling, together with specified method(s) for which it has been designed. Complib automatically pricks (i.e. generates the rows of) any composition when it is entered in order to establish its truth . Stored compositions are then given their own dedicated page, which has a number of expandable tabs: Layout The human-readable form of the composition. Users can adjust the form and style of the layout to suit a wide variety of needs and preferences (see Customising composition layouts ). Blue Line The pricked rows of the composition, with (or without) an overlaid blue line. Music Score The music score breakdown of the composition with respect to a specified music scheme . Users can use one of the default schemes (including for half-muffled ringing), or specify their own. Handbell Positions A table specifying which positions each handbell pair rings during the composition, as well as the number of leads rung (if applicable) and their relative prevalence. Properties The technical features of the composition, such as its length , number of parts , whether it is all-the-work , and more. Related Compositions A list of all compositions which are related to the current one, i.e., because they are related by some transformation such as rotation or reversal, or because they have the same calling but different specified methods. Performances Historical information about occasions when the composition has been performed, with links to the relevant Bellboard page. References A list of all accessible collections containing the current composition. If you own a private collection containing the composition, it will be included here. Library Details Information pertaining to the composition's Complib entry, including which library it is contained in, the corresponding Composition Id , any Notes included by the publisher, etc.","title":"Composition Pages"},{"location":"methods/adding_methods/","text":"Adding methods Complib gives registered users the ability to create custom methods. To get started, click on Create new > New method in the navbar or dropdown menu: The add method page The add method page has a number of fields which allow you to specify certain properties of your custom method. These are: Name (required) The desired name for your custom method. This will be used by Complib to generate the method's full title. See Things to consider when naming methods for advice on choosing a name for your custom method. Note Complib automatically appends the method's class descriptors and stage to its name to give the method's full title. As such, you should not add classification- or stage-specific words such as Treble Bob or Caters to the name field. Stage (required) The stage at which the method is to be rung. Complib supports methods on numbers from two to twenty-eight bells. Place Notation (required) The method's place notation. This can be specified in either full or condensed form. When verifying the method, Complib will automatically condense the place notation as much as possible. To learn how to use place notation, see Place notation . Division Ends (optional) For methods requiring divisions, specifies the row numbers at which the ends of each division occur. If the method has multiple divisions per lead, the corresponding division end rows should be separated with a colon (e.g., 2:8 ). Notes (optional) Specifies a message to be displayed in the Library Details tab of the custom method's page. This is a good place to put any important information about the method which you may want to keep to hand. Validating methods, method errors & warnings Complib will automatically attempt to validate a custom method as soon as its place notation is specified. If the provided place notation is valid, the custom method's full name, diagram and properties will be generated and displayed. Clicking the Validate button will force a re-validation. If the custom method is successfully validated, clicking the Save button will save the custom method as a private method . Method errors If Complib encounters a problem when attempting to validate a custom method, an error message will be displayed. All errors must be cleared before a custom method can be saved. There are a number of different error types. Most errors will give an indication of how to clear them. The following is a non-exhaustive list of some of the more common examples: Error: Place notation _ is invalid for stage... The identified element of place notation is not valid for the specified stage. Usually this means that the place specified in the place notation element does not exist at this stage. For example, attempting to validate the element 18 at stages lower than Major will generate this error. Error: Method title already used... The title generated for the custom method conflicts with the title of an already existing method. The custom method's name must be altered so that the generated title is unique. Error: Method place notation already exists as... The specified place notation is identical to that of an already existing method. The custom method's place notation must be altered so that it is unique. Error: Method cannot be classified... Complib cannot parse the specified place notation. This happens when the specified place notation does not conform to one of the accepted Method XML formats, or is empty. See Place notation to learn more about the place notations that Complib can accept. Error: Division Ends must be positive and less than the lead length. The specified division ends exceed the bounds of the method's lead. The division ends must be rows within the lead length of the method as determined from its place notation. Error: Division Ends must be unique. For custom methods with multiple divisions, two or more of the specified division ends are identical. All division ends must be unique rows within the method's lead. Warnings and other messages If method validation is successful, Complib may display a number of warnings and other messages. These are designed to notify you of any additional information you may wish to take into account when naming your custom method. This information may be redundant. Unlike method errors , warnings and other alerts will not prevent you from saving a custom method. Some of the warnings and other messages you may encounter include: Warning: Method title already used at a different stage... The custom method's generated title is identical to another method of the same class but differing stage. The current Central Council Framework requires that such methods belong to one of the accepted extension paths (see Extensions ). While you can save a custom method which does not belong to an accepted extension path, the method will not be able to be accepted under that name when rung. Warning: Method is related to ___ as a ___ extension... The custom method's place notation can be obtained from an existing method by following one of the accepted extension paths. When this happens, you will likely wish to give the custom method the same name as the existing method, provided that another method with that name does not already exist at the same stage as the custom method. Additionally, while this is expressed as a warning, there are circumstances under which you are obliged to name a method in accordance with an extension path if you wish to do so officially. See Extensions for an in-depth explanation of this topic. Information: Method is related to ___ ... The custom method is related to an existing method at the same stage. This occurs when the custom method is a halflead/leadend variant, or a Single/Double/Reverse form of the existing method. See Method pages > Related methods for more information about method relationships. Things to consider when naming methods Definition: Method names, titles, etc. A method's title is its full descriptive designation, which consists of its name , its class , and its stage , given in that order. It is a long-standing tradition of change ringing that anyone can name a method that has not previously been named subsequent to a qualifying performance. When deciding on a name for a custom method, there are a number of things you may wish to bear in mind. While the following guidelines allow a degree of flexibility (with some exceptions), they are widely accepted rules of thumb within the Exercise. A method's name should be unique. Two methods cannot share the same title. Two methods at differing stages cannot share the same name and class, with the exception of methods that are accepted as belonging to the same extension path , or methods whose class is not expressed as part of its title (e.g. hybrid methods and principles). A method's name should be human-readable and pronounceable. A method's name should be something that a human being can read and say aloud. As such, method names should not consist exclusively of punctuation, numerals or other symbols. A method's name should not contain offensive or abusive language. The Exercise of change ringing is for everyone. As such, method names which are offensive or which contain terms considered to be hate speech are extremely likely to be rejected outright, and methods rung under such names will be forcibly renamed before they can be accepted into the Central Council's Method Library. While not a formal requirement, it is also worth considering the value of good taste when naming methods. The precise determination of this is, of course, subjective. A method has not been officially named until it is rung. According to tradition, the initial right to determine a method's name is afforded to the band which first rings it in a compliant performance . A custom method which you save to Complib under a certain name may be rung under a different name by someone else, and it is under the latter name that the method will be officially recognised. You are of course welcome to give a custom method on Complib any name you like. However, if you intend to ring and name a method in a qualifying performance which will be published, it will be expected that you bear these guidelines (or something akin to them) in mind. Private and public methods A custom method which is successfully saved to Complib will be designated a private method and given its own method page . As noted above, a private method has not been officially named until it is performed and accepted into the Central Council's Method Library. When this happens, the method will be automatically added to Complib's CCCBR library. Any private methods which have identical place notation to a newly recognised method will be deleted, and any compositions using such private methods will be automatically changed to use the new public method. Sharing private methods via link Under normal circumstances, a private method is only visible to the user who created it. However, you may wish to share your private methods with other people under certain circumstances. Complib gives you the ability to do this by way of a special link which can be generated via the private method's page. To generate the link, click the Share button at the top right of the private method's page. This will open a window containing a link in plaintext form which you can copy to your clipboard. Sharing private methods via published compositions Another way to share private methods is by publishing a composition which includes the private method as part of its definition (see Adding compositions to learn more about adding and publishing compositions). Warning Private methods shared via published compositions will be visible to all registered users , though they will not appear in method searches to anyone other than their owners. Please be sure that you are happy with your private method to be widely available before publishing a composition which uses it. Editing and deleting methods To edit a custom method, click on the edit button in the toolbar: This will open the method in the editor, allowing you to change the name, place notation and other aspects of the method as if you were creating it afresh. Warning Be careful about editing custom methods which feature in compositions you have saved. Changing the method's place notation or stage will likely invalidate the compositions in question. Complib does not check to see if any of your private or public compositions will be affected by an alteration made to a custom method. You must make sure to take care of any such cases yourself. To delete a custom method, click on the delete button: This will bring up a prompt asking you to confirm that you want to delete the method. If you are sure, clicking on Confirm Delete will mark the custom method for deletion and remove it from your private methods. Methods marked for deletion can no longer be found via searches, though their pages will remain active for a certain period before being permanently removed, and all links to such pages will still function for the duration of this period. A method marked for deletion will have a special icon to distinguish it: Warning As with editing custom methods, you should bear in mind the effect that deleting a custom method may have on any compositions you have saved.","title":"Adding methods"},{"location":"methods/adding_methods/#adding-methods","text":"Complib gives registered users the ability to create custom methods. To get started, click on Create new > New method in the navbar or dropdown menu:","title":"Adding methods"},{"location":"methods/adding_methods/#the-add-method-page","text":"The add method page has a number of fields which allow you to specify certain properties of your custom method. These are: Name (required) The desired name for your custom method. This will be used by Complib to generate the method's full title. See Things to consider when naming methods for advice on choosing a name for your custom method. Note Complib automatically appends the method's class descriptors and stage to its name to give the method's full title. As such, you should not add classification- or stage-specific words such as Treble Bob or Caters to the name field. Stage (required) The stage at which the method is to be rung. Complib supports methods on numbers from two to twenty-eight bells. Place Notation (required) The method's place notation. This can be specified in either full or condensed form. When verifying the method, Complib will automatically condense the place notation as much as possible. To learn how to use place notation, see Place notation . Division Ends (optional) For methods requiring divisions, specifies the row numbers at which the ends of each division occur. If the method has multiple divisions per lead, the corresponding division end rows should be separated with a colon (e.g., 2:8 ). Notes (optional) Specifies a message to be displayed in the Library Details tab of the custom method's page. This is a good place to put any important information about the method which you may want to keep to hand.","title":"The add method page"},{"location":"methods/adding_methods/#validating-methods-method-errors-warnings","text":"Complib will automatically attempt to validate a custom method as soon as its place notation is specified. If the provided place notation is valid, the custom method's full name, diagram and properties will be generated and displayed. Clicking the Validate button will force a re-validation. If the custom method is successfully validated, clicking the Save button will save the custom method as a private method .","title":"Validating methods, method errors &amp; warnings"},{"location":"methods/adding_methods/#method-errors","text":"If Complib encounters a problem when attempting to validate a custom method, an error message will be displayed. All errors must be cleared before a custom method can be saved. There are a number of different error types. Most errors will give an indication of how to clear them. The following is a non-exhaustive list of some of the more common examples: Error: Place notation _ is invalid for stage... The identified element of place notation is not valid for the specified stage. Usually this means that the place specified in the place notation element does not exist at this stage. For example, attempting to validate the element 18 at stages lower than Major will generate this error. Error: Method title already used... The title generated for the custom method conflicts with the title of an already existing method. The custom method's name must be altered so that the generated title is unique. Error: Method place notation already exists as... The specified place notation is identical to that of an already existing method. The custom method's place notation must be altered so that it is unique. Error: Method cannot be classified... Complib cannot parse the specified place notation. This happens when the specified place notation does not conform to one of the accepted Method XML formats, or is empty. See Place notation to learn more about the place notations that Complib can accept. Error: Division Ends must be positive and less than the lead length. The specified division ends exceed the bounds of the method's lead. The division ends must be rows within the lead length of the method as determined from its place notation. Error: Division Ends must be unique. For custom methods with multiple divisions, two or more of the specified division ends are identical. All division ends must be unique rows within the method's lead.","title":"Method errors"},{"location":"methods/adding_methods/#warnings-and-other-messages","text":"If method validation is successful, Complib may display a number of warnings and other messages. These are designed to notify you of any additional information you may wish to take into account when naming your custom method. This information may be redundant. Unlike method errors , warnings and other alerts will not prevent you from saving a custom method. Some of the warnings and other messages you may encounter include: Warning: Method title already used at a different stage... The custom method's generated title is identical to another method of the same class but differing stage. The current Central Council Framework requires that such methods belong to one of the accepted extension paths (see Extensions ). While you can save a custom method which does not belong to an accepted extension path, the method will not be able to be accepted under that name when rung. Warning: Method is related to ___ as a ___ extension... The custom method's place notation can be obtained from an existing method by following one of the accepted extension paths. When this happens, you will likely wish to give the custom method the same name as the existing method, provided that another method with that name does not already exist at the same stage as the custom method. Additionally, while this is expressed as a warning, there are circumstances under which you are obliged to name a method in accordance with an extension path if you wish to do so officially. See Extensions for an in-depth explanation of this topic. Information: Method is related to ___ ... The custom method is related to an existing method at the same stage. This occurs when the custom method is a halflead/leadend variant, or a Single/Double/Reverse form of the existing method. See Method pages > Related methods for more information about method relationships.","title":"Warnings and other messages"},{"location":"methods/adding_methods/#things-to-consider-when-naming-methods","text":"Definition: Method names, titles, etc. A method's title is its full descriptive designation, which consists of its name , its class , and its stage , given in that order. It is a long-standing tradition of change ringing that anyone can name a method that has not previously been named subsequent to a qualifying performance. When deciding on a name for a custom method, there are a number of things you may wish to bear in mind. While the following guidelines allow a degree of flexibility (with some exceptions), they are widely accepted rules of thumb within the Exercise. A method's name should be unique. Two methods cannot share the same title. Two methods at differing stages cannot share the same name and class, with the exception of methods that are accepted as belonging to the same extension path , or methods whose class is not expressed as part of its title (e.g. hybrid methods and principles). A method's name should be human-readable and pronounceable. A method's name should be something that a human being can read and say aloud. As such, method names should not consist exclusively of punctuation, numerals or other symbols. A method's name should not contain offensive or abusive language. The Exercise of change ringing is for everyone. As such, method names which are offensive or which contain terms considered to be hate speech are extremely likely to be rejected outright, and methods rung under such names will be forcibly renamed before they can be accepted into the Central Council's Method Library. While not a formal requirement, it is also worth considering the value of good taste when naming methods. The precise determination of this is, of course, subjective. A method has not been officially named until it is rung. According to tradition, the initial right to determine a method's name is afforded to the band which first rings it in a compliant performance . A custom method which you save to Complib under a certain name may be rung under a different name by someone else, and it is under the latter name that the method will be officially recognised. You are of course welcome to give a custom method on Complib any name you like. However, if you intend to ring and name a method in a qualifying performance which will be published, it will be expected that you bear these guidelines (or something akin to them) in mind.","title":"Things to consider when naming methods"},{"location":"methods/adding_methods/#private-and-public-methods","text":"A custom method which is successfully saved to Complib will be designated a private method and given its own method page . As noted above, a private method has not been officially named until it is performed and accepted into the Central Council's Method Library. When this happens, the method will be automatically added to Complib's CCCBR library. Any private methods which have identical place notation to a newly recognised method will be deleted, and any compositions using such private methods will be automatically changed to use the new public method.","title":"Private and public methods"},{"location":"methods/adding_methods/#sharing-private-methods-via-link","text":"Under normal circumstances, a private method is only visible to the user who created it. However, you may wish to share your private methods with other people under certain circumstances. Complib gives you the ability to do this by way of a special link which can be generated via the private method's page. To generate the link, click the Share button at the top right of the private method's page. This will open a window containing a link in plaintext form which you can copy to your clipboard.","title":"Sharing private methods via link"},{"location":"methods/adding_methods/#sharing-private-methods-via-published-compositions","text":"Another way to share private methods is by publishing a composition which includes the private method as part of its definition (see Adding compositions to learn more about adding and publishing compositions). Warning Private methods shared via published compositions will be visible to all registered users , though they will not appear in method searches to anyone other than their owners. Please be sure that you are happy with your private method to be widely available before publishing a composition which uses it.","title":"Sharing private methods via published compositions"},{"location":"methods/adding_methods/#editing-and-deleting-methods","text":"To edit a custom method, click on the edit button in the toolbar: This will open the method in the editor, allowing you to change the name, place notation and other aspects of the method as if you were creating it afresh. Warning Be careful about editing custom methods which feature in compositions you have saved. Changing the method's place notation or stage will likely invalidate the compositions in question. Complib does not check to see if any of your private or public compositions will be affected by an alteration made to a custom method. You must make sure to take care of any such cases yourself. To delete a custom method, click on the delete button: This will bring up a prompt asking you to confirm that you want to delete the method. If you are sure, clicking on Confirm Delete will mark the custom method for deletion and remove it from your private methods. Methods marked for deletion can no longer be found via searches, though their pages will remain active for a certain period before being permanently removed, and all links to such pages will still function for the duration of this period. A method marked for deletion will have a special icon to distinguish it: Warning As with editing custom methods, you should bear in mind the effect that deleting a custom method may have on any compositions you have saved.","title":"Editing and deleting methods"},{"location":"methods/blueline_options/","text":"Customising the blue line The blue line options menu can be viewed by clicking on the cog icon at the top right of a method page's Blue Line tab . Clicking on this button will open a window which allows you to customise the appearance of the blue line. Once you have selected the layout options you want, click Save changes to save your changes and close the options menu. Your new layout options will be reflected in the Blue Line tab. Clicking Close or the cross in the upper right will close the window without saving your changes. To restore Complib's default layout, click Default settings . The following sections outline the different customisation options. Display options Plain course Displays the method's plain course . Hides the plain course when deselected. Grid Displays the method's grid . Hides the grid when deselected. Leads across the page Divides the plain course into leads and fits them to the horizontal space available in the window. When deselected, the plain course will be displayed as a single column. Allow lead split Allows the method display to be split in the middle of a lead when auto-resizing. Choose working bells from smallest By default, Complib will choose the biggest working bell (if any exist) and draw its line in the method display. If this option is selected, the smallest working bell will be chosen instead. Note Complib will choose one working bell from each working bell cycle for its default line drawing. For methods with more than one cycle, this means that one bell from each of the disjoint cycles will be selected according to the criterion specified here, and each drawn in a different colour. See Working bell cycles for more details. Maximum columns Sets the maximum number of columns which can be fit horizontally in the window before the display wraps. A value of 0 tells Complib to auto-resize the columns to fit them all within the window without wrapping. Maximum rows per column Sets the number of rows which can be displayed per column before wrapping. A value of 0 will display as many rows as possible (subject to other options). Number of rows to display Sets the number of method rows to display. A value of 0 will display all the method's rows. Starting after row Sets the display's starting row number. By default the display starts from rounds, which is always row 0 . Column display options Place notation Displays the method's place notation to the left of the first displayed column. For methods with palindromic symmetry, only the condensed form of the place notation will be shown. For more information, see Place notation . Warning Place notation will only be shown if Starting after row is set to 0 . Bell numbers Displays the bell numbers of bells without lines in each row of the plain course. Lines Displays all currently specified bell lines (see Line styles and bell weights ). Has no effect on the grid. Show falseness Highlights any repeated rows within the course. The first instance of a repeated row will be shown in light red, with any subsequent occurrences highlighted in dark red. Show music Highlights any rows or partial rows which attract a non-zero score according to the default music scheme in green, and shows the corresponding score value to the right of the column. Row nature Displays the parity of each row to the right of every column (see Row parity ). Show handstroke/backstroke Indicates whether each row occurs at handstroke ( H ) or backstroke ( B ). Place bells When a working bell is specified (see Line styles and bell weights ), shows which place bell is being rung by the working bell at the start of each lead. Leadend underline Displays a horizontal line between the leadend row and the subsequent leadhead. Line styles and bell weights Complib allows you to fine-tune how many lines are displayed and what they look like. Hunt bell weight Specifies the line weight of all hunt bells. A value of 0 will hide the lines. Working bell weight Specifies the line weight of the default working bell. A value of 0 will hide the line. Line styles Allows you to specify line styles for each numbered bell. To edit a bell's line style, click on the bell's name. The options underneath will change to reflect the current line style of the bell, and the current line style for the bell will be drawn on the right of the bell list. Bell number Specifies that the selected bell's number should be displayed at all times, including when a line is drawn over it. Line weight Specifies the line weight to be used for the selected bell. A weight of 0 will hide the line. Warning A display style which is manually specified for any hunt bell(s) or the auto-assigned working bell(s) will be overridden by the default styles specified by Hunt bell weight and Working bell weight . In order to manually specify the display style for these bells, set the relevant default weight to 0 first. Line colour Specifies the colour of the selected bell's line. Every bell has a default colour. Changes to a bell's default colour will be reflected in the grid as well as in the plain course diagram.","title":"Customising the blue line"},{"location":"methods/blueline_options/#customising-the-blue-line","text":"The blue line options menu can be viewed by clicking on the cog icon at the top right of a method page's Blue Line tab . Clicking on this button will open a window which allows you to customise the appearance of the blue line. Once you have selected the layout options you want, click Save changes to save your changes and close the options menu. Your new layout options will be reflected in the Blue Line tab. Clicking Close or the cross in the upper right will close the window without saving your changes. To restore Complib's default layout, click Default settings . The following sections outline the different customisation options.","title":"Customising the blue line"},{"location":"methods/blueline_options/#display-options","text":"Plain course Displays the method's plain course . Hides the plain course when deselected. Grid Displays the method's grid . Hides the grid when deselected. Leads across the page Divides the plain course into leads and fits them to the horizontal space available in the window. When deselected, the plain course will be displayed as a single column. Allow lead split Allows the method display to be split in the middle of a lead when auto-resizing. Choose working bells from smallest By default, Complib will choose the biggest working bell (if any exist) and draw its line in the method display. If this option is selected, the smallest working bell will be chosen instead. Note Complib will choose one working bell from each working bell cycle for its default line drawing. For methods with more than one cycle, this means that one bell from each of the disjoint cycles will be selected according to the criterion specified here, and each drawn in a different colour. See Working bell cycles for more details. Maximum columns Sets the maximum number of columns which can be fit horizontally in the window before the display wraps. A value of 0 tells Complib to auto-resize the columns to fit them all within the window without wrapping. Maximum rows per column Sets the number of rows which can be displayed per column before wrapping. A value of 0 will display as many rows as possible (subject to other options). Number of rows to display Sets the number of method rows to display. A value of 0 will display all the method's rows. Starting after row Sets the display's starting row number. By default the display starts from rounds, which is always row 0 .","title":"Display options"},{"location":"methods/blueline_options/#column-display-options","text":"Place notation Displays the method's place notation to the left of the first displayed column. For methods with palindromic symmetry, only the condensed form of the place notation will be shown. For more information, see Place notation . Warning Place notation will only be shown if Starting after row is set to 0 . Bell numbers Displays the bell numbers of bells without lines in each row of the plain course. Lines Displays all currently specified bell lines (see Line styles and bell weights ). Has no effect on the grid. Show falseness Highlights any repeated rows within the course. The first instance of a repeated row will be shown in light red, with any subsequent occurrences highlighted in dark red. Show music Highlights any rows or partial rows which attract a non-zero score according to the default music scheme in green, and shows the corresponding score value to the right of the column. Row nature Displays the parity of each row to the right of every column (see Row parity ). Show handstroke/backstroke Indicates whether each row occurs at handstroke ( H ) or backstroke ( B ). Place bells When a working bell is specified (see Line styles and bell weights ), shows which place bell is being rung by the working bell at the start of each lead. Leadend underline Displays a horizontal line between the leadend row and the subsequent leadhead.","title":"Column display options"},{"location":"methods/blueline_options/#line-styles-and-bell-weights","text":"Complib allows you to fine-tune how many lines are displayed and what they look like. Hunt bell weight Specifies the line weight of all hunt bells. A value of 0 will hide the lines. Working bell weight Specifies the line weight of the default working bell. A value of 0 will hide the line. Line styles Allows you to specify line styles for each numbered bell. To edit a bell's line style, click on the bell's name. The options underneath will change to reflect the current line style of the bell, and the current line style for the bell will be drawn on the right of the bell list. Bell number Specifies that the selected bell's number should be displayed at all times, including when a line is drawn over it. Line weight Specifies the line weight to be used for the selected bell. A weight of 0 will hide the line. Warning A display style which is manually specified for any hunt bell(s) or the auto-assigned working bell(s) will be overridden by the default styles specified by Hunt bell weight and Working bell weight . In order to manually specify the display style for these bells, set the relevant default weight to 0 first. Line colour Specifies the colour of the selected bell's line. Every bell has a default colour. Changes to a bell's default colour will be reflected in the grid as well as in the plain course diagram.","title":"Line styles and bell weights"},{"location":"methods/method_properties/","text":"Understanding method properties When a method is added to Complib, various properties of the method are determined in order to classify it, as well as highlight any of its notable features. These properties are displayed in the method page's properties tab . The properties tab When expanded, the top of the tab comprises a number of boxes, each of which describes a different feature of the method. Changes A method consists of a sequence of rows rung in sequence. The relationship between two adjacent rows with regard to how bells move from one row to the other is referred to as a change . There are a number of different types of change that can be made between subsequent rows of a method: Adjacent The method only contains changes where bells move at most one place between rows. All traditional methods fall into this category. Identity The method contains a change where no bells move place. Jump The method contains a change where a bell moves more than one place (for example, the change between the rows 1 2 3 4 5 6 and 2 3 1 4 6 5 ). Methods containing jump changes are referred to as Jump methods. Static The changes of the method are fixed, which is to say that they are not altered as the method is rung (unless a call is made). Dynamic The changes of the method are not fixed, and are dynamically altered as the method is rung. One type of \"method\" with dynamic changes is the loosely defined family of Dixonoids , where places are made depending on which numbered bell is leading. Complib does not currently support the definition of methods with dynamic changes. Hunt bells Methods can fall into one of two distinct categories depending on the presence or absence of a hunt bell . Definition A hunt bell is a bell which returns to the same place at the start of each lead/division. Principle A method with no hunt bells (e.g. Stedman, Erin). Hunter A method with one or more hunt bells. Hunters are further classified depending on the number of hunt bells: One indicates that there is a single hunt bell (e.g. Plain Bob). Multiple indicates that there are multiple hunt bells (e.g. Grandsire). All indicates that all the bells are hunt bells (e.g. 12 Victoria Street Surprise Minor ). In this case, the plain course of the method is a single lead/division long. Historically, methods of this kind came under the umbrella classification of blocks , a term which has since been retired. Working bell cycles All bells in a method which are not hunt bells are referred to as working bells . The plain course of a method involves the working bells moving through one or more cycles of place bells. Monocyclic The working bells are all part of the same cycle: all working bells ring all the distinct place bells during a plain course. The plain course is the same length as the number of leads in the cycle. Isocyclic The working bells are divided up into two more cycles, all of which are the same length. In this case, the plain course is the same length as the number of leads in any one of the cycles. Differential The working bells are divided up into two or more cycles of different lengths. Here, the plain course is equal to the least common multiple of the lengths of all the cycles. Hunter classes All methods which are hunters (see Hunt Bells ) can be further divided into a number of different classes . The different hunter classes are arranged in a hierarchy as follows: Plain Place Bob Single* Treble Dodging Treble Bob Delight Surprise Alliance Treble Place Hybrid Little ** A method with a single non-stationary hunt bell will fall into one and only one hunter class. Note * Single is not strictly speaking a method class, but a specific subtype of Plain method with certain properties. ** A method may be Little in addition to its main hunter class. For a detailed explanation of the different hunter classes and how they are distinguished, please refer to Section 4 of the Central Council Framework . Symmetry A symmetry is a transformation (rotation, reflection, translation, etc.) which leaves the appearance of something unchanged. A method has one or more symmetry types : Asymmetric The method has no symmetry. Palindromic The method is the same when rung forwards and backwards. Equivalently, the method's line is the same when reflected in an axis perpendicular to the direction of the line. Double The method is the same when transformed in any of the following equivalent ways: The method's place notation is inverted (see Place notation ). The method's rows are written back to front (e.g. 1 2 3 4 becomes 4 3 2 1 ). The method's line is viewed from the reverse side of a sheet of paper, or held up to a mirror. The method's line is reflected in an axis parallel to the direction of the line and shifted along the same axis by some amount (known mathematically as a glide reflection ). Rotational The method is the same when rotated one half-turn about a point. For palindromic methods there is also one symmetry subtype: Offset A palindromic method whose axis of symmetry is not at the halfway point of its place notation. Many twin hunt methods such as Grandsire fall into this category. For a visual demonstration of the different symmetry types, see this infographic . Leadheads Almost all methods (currently all methods in Complib's CCCBR library) have a plain course which can be divided into one or more sections of fixed, finite length, which are called leads or divisions . It is common to refer to the starting row of a lead (or division) as the leadhead (or division end ). The collected set of leadheads of a method may satisfy one of a number of conditions: Plain Bob The leadhead rows form a (non-trivial) subset of the leadheads of Plain Bob on the same number of bells. Grandsire The leadhead rows form a (non-trivial) subset of the leadheads of Grandsire on the same number of bells. Original The leadhead rows form a (non-trivial) subset of the division ends of Original on the same number of bells. Cyclic The leadhead rows form a (non-trivial) subset of the cyclic rotations of rounds on the same number of bells (e.g. 2 3 4 5 1 , 3 4 5 1 2 , etc.). Rounds The method has only one lead/division and therefore only one leadhead, which must necessarily be equal to rounds on the same number of bells. Note There are methods whose leadheads do not fall into any of the above categories (though a significant majority of methods do). Course properties Taken as a whole, the plain course of the method can have certain properties which may be of particular interest: True plain course The method has a plain course which is true . True leads The plain course comprises leads which are individually true (but which may be false against each other). Right place All places in the plain course are made right (i.e., rung handstroke-backstroke). Uneven parity For principles, this means that the plain course contains an unequal number of odd and even rows (see Row Parity ). For hunters, this means that there are an unequal number of odd and even rows for any given position in the hunt path of the principal hunt bell . Layered Each row of the plain course can be separated into two or more non-overlapping groups of adjacent bells such that no bell strays outside of its starting group during the course. For example, Plain Bob Minor rung on 8 bells with 7 and 8 dodging behind is equivalent to the layered method Broadley Little Bob Major . Miscellaneous In addition to the above, the properties tab also lists miscellaneous information about the method in text form. The listed items are: Place notation The method's place notation, given in Method XML format (see Place notation ). Leadhead The row reached after a single plain lead and, if applicable, the method's alphanumeric leadhead code . Divisions Gives the length and arrangement of the method's division(s) if applicable. The length of each division is the number of rows it contains. If the method has more than one division per lead, the lengths of each division are listed and separated by colons (e.g. 6:6 ). If the method is usually started at a point other than the start of a division , the starting point for the first division will be specified. For example, 6:6 after row 2 means that the divisions have lengths of 6 and 6, with the first division starting after row 2. Tip When counting rows, remember that the method starts from row 0. Default calls The call type determines which calls will be used by default when creating a composition for the method. The call types that Complib recognises are: Near : calls default toward the front of the change (e.g. 4ths place bobs). Far : calls default toward the back of the change (e.g. n-2's place bobs). Mixed : the method uses multiple call types. Grandsire : the method uses Grandsire-type calls. Stedman : the method uses Stedman-type calls. None : the method has no specified call type. Method above/below For methods which are hunters, if the method shares above/below work with another method that was rung prior to it, that method will be listed here. The method listed will (with some exceptions) be the earliest applicable method rung to a peal. Note The exceptions to this are where a method which is much more widely known was nevertheless rung to a peal after another more obscure method sharing the same above/below work. One such example is New Cambridge Surprise Major , which was pealed almost 50 years before Cambridge Surprise Major even though the latter was (pretty obviously!) known to the Exercise before the former. FCH Groups Lists the codes for the method's false coursehead groups (if applicable). See this section of the Central Council Framework for a definition of the false course head groups. Accepted extension path For methods with a compliant extension or contraction which has been named, lists the extension path(s) used to derive the accepted extension(s) or contraction(s) (see Extensions ). Compositions designed for this method The number of (published) compositions on Complib which include this method in their definition. Clicking on the number will jump to a search which lists them all. Leads in course The number of leads in the plain course of the method. This is equal to the least common multiple of the lengths of its working bell cycles (see Working bell cycles ). Lead length The number of rows in a plain lead. This is also equal to the number of elements in the method's expanded place notation. Plain course length The number of rows in the method's plain course. This is equal to the number of leads in the course multiplied by the lead length. Hunt bells The number of bells which return to the same position they started in at the end of each lead (see Hunt bells ). Working bells The number of bells which end each lead in a different position from where they started. Also equal to the total number of bells minus the number of hunt bells and stationary bells. Stationary bells The number of bells which do not change place for the whole of the plain course. Maximum blows in one place The maximum number of times any bell remains in the same place between consecutive rows of the method.","title":"Understanding method properties"},{"location":"methods/method_properties/#understanding-method-properties","text":"When a method is added to Complib, various properties of the method are determined in order to classify it, as well as highlight any of its notable features. These properties are displayed in the method page's properties tab .","title":"Understanding method properties"},{"location":"methods/method_properties/#the-properties-tab","text":"When expanded, the top of the tab comprises a number of boxes, each of which describes a different feature of the method.","title":"The properties tab"},{"location":"methods/method_properties/#changes","text":"A method consists of a sequence of rows rung in sequence. The relationship between two adjacent rows with regard to how bells move from one row to the other is referred to as a change . There are a number of different types of change that can be made between subsequent rows of a method: Adjacent The method only contains changes where bells move at most one place between rows. All traditional methods fall into this category. Identity The method contains a change where no bells move place. Jump The method contains a change where a bell moves more than one place (for example, the change between the rows 1 2 3 4 5 6 and 2 3 1 4 6 5 ). Methods containing jump changes are referred to as Jump methods. Static The changes of the method are fixed, which is to say that they are not altered as the method is rung (unless a call is made). Dynamic The changes of the method are not fixed, and are dynamically altered as the method is rung. One type of \"method\" with dynamic changes is the loosely defined family of Dixonoids , where places are made depending on which numbered bell is leading. Complib does not currently support the definition of methods with dynamic changes.","title":"Changes"},{"location":"methods/method_properties/#hunt-bells","text":"Methods can fall into one of two distinct categories depending on the presence or absence of a hunt bell . Definition A hunt bell is a bell which returns to the same place at the start of each lead/division. Principle A method with no hunt bells (e.g. Stedman, Erin). Hunter A method with one or more hunt bells. Hunters are further classified depending on the number of hunt bells: One indicates that there is a single hunt bell (e.g. Plain Bob). Multiple indicates that there are multiple hunt bells (e.g. Grandsire). All indicates that all the bells are hunt bells (e.g. 12 Victoria Street Surprise Minor ). In this case, the plain course of the method is a single lead/division long. Historically, methods of this kind came under the umbrella classification of blocks , a term which has since been retired.","title":"Hunt bells"},{"location":"methods/method_properties/#working-bell-cycles","text":"All bells in a method which are not hunt bells are referred to as working bells . The plain course of a method involves the working bells moving through one or more cycles of place bells. Monocyclic The working bells are all part of the same cycle: all working bells ring all the distinct place bells during a plain course. The plain course is the same length as the number of leads in the cycle. Isocyclic The working bells are divided up into two more cycles, all of which are the same length. In this case, the plain course is the same length as the number of leads in any one of the cycles. Differential The working bells are divided up into two or more cycles of different lengths. Here, the plain course is equal to the least common multiple of the lengths of all the cycles.","title":"Working bell cycles"},{"location":"methods/method_properties/#hunter-classes","text":"All methods which are hunters (see Hunt Bells ) can be further divided into a number of different classes . The different hunter classes are arranged in a hierarchy as follows: Plain Place Bob Single* Treble Dodging Treble Bob Delight Surprise Alliance Treble Place Hybrid Little ** A method with a single non-stationary hunt bell will fall into one and only one hunter class. Note * Single is not strictly speaking a method class, but a specific subtype of Plain method with certain properties. ** A method may be Little in addition to its main hunter class. For a detailed explanation of the different hunter classes and how they are distinguished, please refer to Section 4 of the Central Council Framework .","title":"Hunter classes"},{"location":"methods/method_properties/#symmetry","text":"A symmetry is a transformation (rotation, reflection, translation, etc.) which leaves the appearance of something unchanged. A method has one or more symmetry types : Asymmetric The method has no symmetry. Palindromic The method is the same when rung forwards and backwards. Equivalently, the method's line is the same when reflected in an axis perpendicular to the direction of the line. Double The method is the same when transformed in any of the following equivalent ways: The method's place notation is inverted (see Place notation ). The method's rows are written back to front (e.g. 1 2 3 4 becomes 4 3 2 1 ). The method's line is viewed from the reverse side of a sheet of paper, or held up to a mirror. The method's line is reflected in an axis parallel to the direction of the line and shifted along the same axis by some amount (known mathematically as a glide reflection ). Rotational The method is the same when rotated one half-turn about a point. For palindromic methods there is also one symmetry subtype: Offset A palindromic method whose axis of symmetry is not at the halfway point of its place notation. Many twin hunt methods such as Grandsire fall into this category. For a visual demonstration of the different symmetry types, see this infographic .","title":"Symmetry"},{"location":"methods/method_properties/#leadheads","text":"Almost all methods (currently all methods in Complib's CCCBR library) have a plain course which can be divided into one or more sections of fixed, finite length, which are called leads or divisions . It is common to refer to the starting row of a lead (or division) as the leadhead (or division end ). The collected set of leadheads of a method may satisfy one of a number of conditions: Plain Bob The leadhead rows form a (non-trivial) subset of the leadheads of Plain Bob on the same number of bells. Grandsire The leadhead rows form a (non-trivial) subset of the leadheads of Grandsire on the same number of bells. Original The leadhead rows form a (non-trivial) subset of the division ends of Original on the same number of bells. Cyclic The leadhead rows form a (non-trivial) subset of the cyclic rotations of rounds on the same number of bells (e.g. 2 3 4 5 1 , 3 4 5 1 2 , etc.). Rounds The method has only one lead/division and therefore only one leadhead, which must necessarily be equal to rounds on the same number of bells. Note There are methods whose leadheads do not fall into any of the above categories (though a significant majority of methods do).","title":"Leadheads"},{"location":"methods/method_properties/#course-properties","text":"Taken as a whole, the plain course of the method can have certain properties which may be of particular interest: True plain course The method has a plain course which is true . True leads The plain course comprises leads which are individually true (but which may be false against each other). Right place All places in the plain course are made right (i.e., rung handstroke-backstroke). Uneven parity For principles, this means that the plain course contains an unequal number of odd and even rows (see Row Parity ). For hunters, this means that there are an unequal number of odd and even rows for any given position in the hunt path of the principal hunt bell . Layered Each row of the plain course can be separated into two or more non-overlapping groups of adjacent bells such that no bell strays outside of its starting group during the course. For example, Plain Bob Minor rung on 8 bells with 7 and 8 dodging behind is equivalent to the layered method Broadley Little Bob Major .","title":"Course properties"},{"location":"methods/method_properties/#miscellaneous","text":"In addition to the above, the properties tab also lists miscellaneous information about the method in text form. The listed items are: Place notation The method's place notation, given in Method XML format (see Place notation ). Leadhead The row reached after a single plain lead and, if applicable, the method's alphanumeric leadhead code . Divisions Gives the length and arrangement of the method's division(s) if applicable. The length of each division is the number of rows it contains. If the method has more than one division per lead, the lengths of each division are listed and separated by colons (e.g. 6:6 ). If the method is usually started at a point other than the start of a division , the starting point for the first division will be specified. For example, 6:6 after row 2 means that the divisions have lengths of 6 and 6, with the first division starting after row 2. Tip When counting rows, remember that the method starts from row 0. Default calls The call type determines which calls will be used by default when creating a composition for the method. The call types that Complib recognises are: Near : calls default toward the front of the change (e.g. 4ths place bobs). Far : calls default toward the back of the change (e.g. n-2's place bobs). Mixed : the method uses multiple call types. Grandsire : the method uses Grandsire-type calls. Stedman : the method uses Stedman-type calls. None : the method has no specified call type. Method above/below For methods which are hunters, if the method shares above/below work with another method that was rung prior to it, that method will be listed here. The method listed will (with some exceptions) be the earliest applicable method rung to a peal. Note The exceptions to this are where a method which is much more widely known was nevertheless rung to a peal after another more obscure method sharing the same above/below work. One such example is New Cambridge Surprise Major , which was pealed almost 50 years before Cambridge Surprise Major even though the latter was (pretty obviously!) known to the Exercise before the former. FCH Groups Lists the codes for the method's false coursehead groups (if applicable). See this section of the Central Council Framework for a definition of the false course head groups. Accepted extension path For methods with a compliant extension or contraction which has been named, lists the extension path(s) used to derive the accepted extension(s) or contraction(s) (see Extensions ). Compositions designed for this method The number of (published) compositions on Complib which include this method in their definition. Clicking on the number will jump to a search which lists them all. Leads in course The number of leads in the plain course of the method. This is equal to the least common multiple of the lengths of its working bell cycles (see Working bell cycles ). Lead length The number of rows in a plain lead. This is also equal to the number of elements in the method's expanded place notation. Plain course length The number of rows in the method's plain course. This is equal to the number of leads in the course multiplied by the lead length. Hunt bells The number of bells which return to the same position they started in at the end of each lead (see Hunt bells ). Working bells The number of bells which end each lead in a different position from where they started. Also equal to the total number of bells minus the number of hunt bells and stationary bells. Stationary bells The number of bells which do not change place for the whole of the plain course. Maximum blows in one place The maximum number of times any bell remains in the same place between consecutive rows of the method.","title":"Miscellaneous"},{"location":"methods/overview/","text":"Method pages Complib acts as a method collection, and has dedicated pages for all methods in its libraries , including every method officially named and rung. The official CCCBR library is regularly updated and newly named methods automatically added in order to keep the collection up to date. When a new method is added to any of its libraries, Complib classifies it and derives its various properties. It then creates a page for the method where all relevant information can be viewed. For example, the method page for Bristol Surprise Major looks something like this: The method's title is displayed at the top. If this title has changed since the method was first rung, the previous title(s) will be displayed underneath the current title if they are known. Toolbar To the side of the method's title is the toolbar : The toolbar buttons can be identified by hovering over them. They are, from left to right: Find compositions true to this Begins an extended search of all Complib compositions to determine which ones can be rung with this method (see Extended searches ). Add to collection Adds the method to a collection of your choice (see Collections ). Clone Creates a duplicate of the method in the method editor which you can then edit (see Adding methods ). Share Displays a public link to the method page so it can be shared with others. Export rows Opens another tab displaying all the rows of the method's plain course in plaintext format. Printable version Opens a new tab displaying the contents of the blue line tab in a form which is easy to print. Note The Find compositions true to this , Add to collection and Clone buttons are only available to registered Power Users. If you are not logged in, these buttons will not be displayed. Tabs overview The majority of the page is subdivided into various expandable tabs (click on the name of a tab to skip to a detailed description of its contents): Blue Line A visual representation of the method. Properties The structural properties of the method, including its place notation , leadhead group , extension path (if applicable) and more. A large amount of this information pertains to the method's classification , which derives from the Central Council's Framework for Method Ringing . Related Methods Any methods which are related to the current method, such as halflead/leadend variants and methods belonging to the same extension family (whether compliant with the Central Council Framework or not). Trivial Variations Any methods which are considered to be trivial variations of the current method. Performances Historical information about occasions when the method has been performed, including when it was first rung and named and any recognised record lengths, with links to the relevant Bellboard performance (if provided). References A list of all accessible collections containing the method. If you own a private collection containing the method, it will be listed here. Library Details The method's Complib-specific metadata including which library it is contained within, the corresponding method ID , and its dates of creation, publication, etc. Blue line This tab renders a visual representation of the method. By default, this is done in the traditional Diagrams style with all hunt bells plus a single working bell drawn in coloured lines. The method's grid , which consists of a single lead/division with all bells drawn in coloured lines, is also shown by default. The appearance of the blue line display is highly customisable. For more information about how to adjust the display style, see Customising blue lines . Note You need to be logged in as a registered user to adjust the Blue Line display style. Properties For an explanation of the information contained in the properties tab, see Understanding method properties . Related methods Methods may be related to other methods in a number of different ways. Named methods which are related to the current method in any of the following ways will be listed in this tab in the appropriate field. Halflead/leadend variants A halflead/leadend variant of a method is any method which differs from it only by which place is made at the halflead/leadend. For example, Cambridge Surprise Minor and Primrose Surprise Minor are leadend variants. Tip Hovering over the name of a halflead/leadend variant will indicate the way in which its halflead (HL) and/or leadend (LE) differs from the current method. Reverse The reverse of a method is the method obtained by reversing all its rows. Equivalently, it is the method obtained by inverting the method's place notation (see Place notation ). Double work above/below For methods with a single hunt bell, the combination of the work done above/below the hunt bell with an inverted copy of itself will give a double method, which may or may not have been named. Extensions Two methods at differing stages are extensions of one another if they are related by any of the recognised extension paths . If the method can be extended using any of the recognised extension paths, all methods in the path will be listed up to stage Twenty-Four (see Extensions ). Non-conforming extensions If two methods share the same name and class but are not related by any of the recognised extension paths, then they are non-conforming extensions of one another. A previously non-conforming extension may become a conforming extension in the event that: a new extension pathway becomes recognised; and the previously non-conforming extension can be obtained by application of that new pathway. Note There are a number of reasons why a method may be listed on Complib as a non-conforming extension. These include (but are not limited to): The method was named and rung before the formal framework of method extension was developed. The method is non-palindromic (Complib does not currently process extensions for non-palindromic methods, but this will hopefully change at some point in the future). The method was not previously recognised as a conforming extension and was named accordingly, and now is. Method classification has a complex history, and its development has reflected changing values within the Exercise. For the most part, there is a general agreement that more rigorous modern classification practices should be balanced with the preservation of ringing history. Trivial variations This tab lists all named methods which are related to the current method by means of a trivial variation , together with their place notations. Trivial variations are ways of slightly altering the blue line of a method without changing its overall structure. The image above shows the first leads of Yorkshire Surprise Major (left) and Quedgeley Surprise Major (right), which are trivial variations of each other. It can be seen by inspection that the two are almost identical, with only slight differences in the blue line. More specifically, Complib will determine that two methods are trivial variations if the following conditions all hold: There is a sequence of changes in the lead where the same two bells are working together in both methods; AND The bells are in the same relative position at the start of the sequence in both methods; AND The bells are in the same relative position at the end of the sequence in both methods; AND The methods differ only by sequences satisfying conditions 1-3. It is important to note that the word trivial is not a value judgement: it does not imply that one method is inherently more original or \"valuable\" than another. It is a purely technical classification which identifies a similarity in their constructions. Indeed, the property of trivial variation is a symmetric relationship: if method B is a trivial variation of method A, then method A is necessarily a trivial variation of method B. Contrary to the name, a method might differ from its trivial variants in decidedly non-trivial ways. They may not share exactly the same rows, and subsequently may have different false coursehead groups, among other things. A consequence of this is the following: Warning A composition which is true for one method is not necessarily true for all (or indeed any) of its trivial variations. You should always check a composition is true for the specific method you wish to ring. Performances This tab lists any documented performances of the method which have been added to its Complib page. Each entry has three fields: Date The date on which the performance was rung. Type Specifies one of a number of different performance types: First inclusion in a peal/quarter peal/etc. : a multi-method performance where the method is recognised to have been rung for the first time. First peal/quarter peal/etc. : a single-method performance where the method is recognised to have been rung for the first time (or, for methods previously rung in a multi-method performance, the first time it was rung by itself). First extent : for methods at stages Minor and below, a performance containing an extent of the method at that stage where the method is recognised to have been rung for the first time. Long Length : a performance of 10,000 changes or more. Performances are further typified by whether they were rung on towerbells or handbells. Note There is an order of priority within performance types, which broadly corresponds with length. A performance is typically only included if no performance of that length or greater has been recorded prior to that date. Once a performance of greater length has been recorded, shorter performances from after that date will no longer be added (but will be retained if added previously). The exception to this is long lengths , which will always be recorded. The precedence is, in descending order: Long length First peal First inclusion in a peal First quarter peal First inclusion in a quarter peal First extent Details The published details of the performance: title, performing Guild or Association (if given), location, and conductor (if given). The entry in this field acts as a link to the corresponding Bellboard performance, provided it exists and has been linked to the method page. References This tab lists all collections which you have access to and which reference the current method (inaccessible private collections will not be displayed). Each entry has four fields, with every entry acting as a link to the relevant Complib page: Collection The name of the collection to which the method belongs. Chapter (optional) The chapter of the method's entry in the collection (if specified). Page (optional) The page number of the method's entry in the collection (if specified). Reference (optional) In the case that the collection is referenced by a certain index, the corresponding reference for the method within the collection. For more on references and how they relate to collections, see Collections . Library details This tab lists some of the method's Complib-specific metadata. Library The smallest library which contains the method. Methods in the Provisional library will be listed as Public . Notes Any notes provided by the method's publisher (see Adding methods ). Method Id The method's numerical ID. This is the number featured at the end of a method page's URL. Created on The date and time at which the method was created and the name of the user who created it. Note Times and dates are given in Coordinated Universal Time (UTC). Modified on The date and time at which the method was last modified and the name of the user who modified it. Published on The date and time at which the method was made public.","title":"Method pages"},{"location":"methods/overview/#method-pages","text":"Complib acts as a method collection, and has dedicated pages for all methods in its libraries , including every method officially named and rung. The official CCCBR library is regularly updated and newly named methods automatically added in order to keep the collection up to date. When a new method is added to any of its libraries, Complib classifies it and derives its various properties. It then creates a page for the method where all relevant information can be viewed. For example, the method page for Bristol Surprise Major looks something like this: The method's title is displayed at the top. If this title has changed since the method was first rung, the previous title(s) will be displayed underneath the current title if they are known.","title":"Method pages"},{"location":"methods/overview/#toolbar","text":"To the side of the method's title is the toolbar : The toolbar buttons can be identified by hovering over them. They are, from left to right: Find compositions true to this Begins an extended search of all Complib compositions to determine which ones can be rung with this method (see Extended searches ). Add to collection Adds the method to a collection of your choice (see Collections ). Clone Creates a duplicate of the method in the method editor which you can then edit (see Adding methods ). Share Displays a public link to the method page so it can be shared with others. Export rows Opens another tab displaying all the rows of the method's plain course in plaintext format. Printable version Opens a new tab displaying the contents of the blue line tab in a form which is easy to print. Note The Find compositions true to this , Add to collection and Clone buttons are only available to registered Power Users. If you are not logged in, these buttons will not be displayed.","title":"Toolbar"},{"location":"methods/overview/#tabs-overview","text":"The majority of the page is subdivided into various expandable tabs (click on the name of a tab to skip to a detailed description of its contents): Blue Line A visual representation of the method. Properties The structural properties of the method, including its place notation , leadhead group , extension path (if applicable) and more. A large amount of this information pertains to the method's classification , which derives from the Central Council's Framework for Method Ringing . Related Methods Any methods which are related to the current method, such as halflead/leadend variants and methods belonging to the same extension family (whether compliant with the Central Council Framework or not). Trivial Variations Any methods which are considered to be trivial variations of the current method. Performances Historical information about occasions when the method has been performed, including when it was first rung and named and any recognised record lengths, with links to the relevant Bellboard performance (if provided). References A list of all accessible collections containing the method. If you own a private collection containing the method, it will be listed here. Library Details The method's Complib-specific metadata including which library it is contained within, the corresponding method ID , and its dates of creation, publication, etc.","title":"Tabs overview"},{"location":"methods/overview/#blue-line","text":"This tab renders a visual representation of the method. By default, this is done in the traditional Diagrams style with all hunt bells plus a single working bell drawn in coloured lines. The method's grid , which consists of a single lead/division with all bells drawn in coloured lines, is also shown by default. The appearance of the blue line display is highly customisable. For more information about how to adjust the display style, see Customising blue lines . Note You need to be logged in as a registered user to adjust the Blue Line display style.","title":"Blue line"},{"location":"methods/overview/#properties","text":"For an explanation of the information contained in the properties tab, see Understanding method properties .","title":"Properties"},{"location":"methods/overview/#related-methods","text":"Methods may be related to other methods in a number of different ways. Named methods which are related to the current method in any of the following ways will be listed in this tab in the appropriate field. Halflead/leadend variants A halflead/leadend variant of a method is any method which differs from it only by which place is made at the halflead/leadend. For example, Cambridge Surprise Minor and Primrose Surprise Minor are leadend variants. Tip Hovering over the name of a halflead/leadend variant will indicate the way in which its halflead (HL) and/or leadend (LE) differs from the current method. Reverse The reverse of a method is the method obtained by reversing all its rows. Equivalently, it is the method obtained by inverting the method's place notation (see Place notation ). Double work above/below For methods with a single hunt bell, the combination of the work done above/below the hunt bell with an inverted copy of itself will give a double method, which may or may not have been named. Extensions Two methods at differing stages are extensions of one another if they are related by any of the recognised extension paths . If the method can be extended using any of the recognised extension paths, all methods in the path will be listed up to stage Twenty-Four (see Extensions ). Non-conforming extensions If two methods share the same name and class but are not related by any of the recognised extension paths, then they are non-conforming extensions of one another. A previously non-conforming extension may become a conforming extension in the event that: a new extension pathway becomes recognised; and the previously non-conforming extension can be obtained by application of that new pathway. Note There are a number of reasons why a method may be listed on Complib as a non-conforming extension. These include (but are not limited to): The method was named and rung before the formal framework of method extension was developed. The method is non-palindromic (Complib does not currently process extensions for non-palindromic methods, but this will hopefully change at some point in the future). The method was not previously recognised as a conforming extension and was named accordingly, and now is. Method classification has a complex history, and its development has reflected changing values within the Exercise. For the most part, there is a general agreement that more rigorous modern classification practices should be balanced with the preservation of ringing history.","title":"Related methods"},{"location":"methods/overview/#trivial-variations","text":"This tab lists all named methods which are related to the current method by means of a trivial variation , together with their place notations. Trivial variations are ways of slightly altering the blue line of a method without changing its overall structure. The image above shows the first leads of Yorkshire Surprise Major (left) and Quedgeley Surprise Major (right), which are trivial variations of each other. It can be seen by inspection that the two are almost identical, with only slight differences in the blue line. More specifically, Complib will determine that two methods are trivial variations if the following conditions all hold: There is a sequence of changes in the lead where the same two bells are working together in both methods; AND The bells are in the same relative position at the start of the sequence in both methods; AND The bells are in the same relative position at the end of the sequence in both methods; AND The methods differ only by sequences satisfying conditions 1-3. It is important to note that the word trivial is not a value judgement: it does not imply that one method is inherently more original or \"valuable\" than another. It is a purely technical classification which identifies a similarity in their constructions. Indeed, the property of trivial variation is a symmetric relationship: if method B is a trivial variation of method A, then method A is necessarily a trivial variation of method B. Contrary to the name, a method might differ from its trivial variants in decidedly non-trivial ways. They may not share exactly the same rows, and subsequently may have different false coursehead groups, among other things. A consequence of this is the following: Warning A composition which is true for one method is not necessarily true for all (or indeed any) of its trivial variations. You should always check a composition is true for the specific method you wish to ring.","title":"Trivial variations"},{"location":"methods/overview/#performances","text":"This tab lists any documented performances of the method which have been added to its Complib page. Each entry has three fields: Date The date on which the performance was rung. Type Specifies one of a number of different performance types: First inclusion in a peal/quarter peal/etc. : a multi-method performance where the method is recognised to have been rung for the first time. First peal/quarter peal/etc. : a single-method performance where the method is recognised to have been rung for the first time (or, for methods previously rung in a multi-method performance, the first time it was rung by itself). First extent : for methods at stages Minor and below, a performance containing an extent of the method at that stage where the method is recognised to have been rung for the first time. Long Length : a performance of 10,000 changes or more. Performances are further typified by whether they were rung on towerbells or handbells. Note There is an order of priority within performance types, which broadly corresponds with length. A performance is typically only included if no performance of that length or greater has been recorded prior to that date. Once a performance of greater length has been recorded, shorter performances from after that date will no longer be added (but will be retained if added previously). The exception to this is long lengths , which will always be recorded. The precedence is, in descending order: Long length First peal First inclusion in a peal First quarter peal First inclusion in a quarter peal First extent Details The published details of the performance: title, performing Guild or Association (if given), location, and conductor (if given). The entry in this field acts as a link to the corresponding Bellboard performance, provided it exists and has been linked to the method page.","title":"Performances"},{"location":"methods/overview/#references","text":"This tab lists all collections which you have access to and which reference the current method (inaccessible private collections will not be displayed). Each entry has four fields, with every entry acting as a link to the relevant Complib page: Collection The name of the collection to which the method belongs. Chapter (optional) The chapter of the method's entry in the collection (if specified). Page (optional) The page number of the method's entry in the collection (if specified). Reference (optional) In the case that the collection is referenced by a certain index, the corresponding reference for the method within the collection. For more on references and how they relate to collections, see Collections .","title":"References"},{"location":"methods/overview/#library-details","text":"This tab lists some of the method's Complib-specific metadata. Library The smallest library which contains the method. Methods in the Provisional library will be listed as Public . Notes Any notes provided by the method's publisher (see Adding methods ). Method Id The method's numerical ID. This is the number featured at the end of a method page's URL. Created on The date and time at which the method was created and the name of the user who created it. Note Times and dates are given in Coordinated Universal Time (UTC). Modified on The date and time at which the method was last modified and the name of the user who modified it. Published on The date and time at which the method was made public.","title":"Library details"},{"location":"methods/place_notation/","text":"Place notation All change ringing is concerned with taking a certain ordering of bells, called a row , and generating a new row from it according to rules. A method can be thought of as a set of these rules applied in sequence. In practice there are many different ways that methods can be written down. Most frequently they are represented visually as a blue line diagram , which can aid in memorisation. Some methods can be learned according to a rule such as \"first, treble-bob, last, near, full, far...\" which expresses the blue line concisely as a short phrase. However, in order to refer to a specific method uniquely , it is necessary to have a compact way of expressing what exactly every bell does while ringing it. Place notation is a tool invented in order to do just that. The basic concept First, let us recall some definitions: Row An ordering of the bells 1 to N , where N is the total number of bells being rung. A row is written in ringing order left to right. Each bell rings once and only once within a row. For example: 1 3 5 2 4 6 is a row; 9 8 7 6 5 4 3 2 1 is a row; 1 1 3 4 7 8 is not a row (why?). Change The action of moving from one row to another by altering the order of the bells; or, the relationship between two rows in terms of how they differ. (NB: A change can also be another name for a row, which can be a little confusing, though the meaning is usually clear in context.) In order to qualify as a change, the following condition must be satisfied: The two rows must have the same number of bells. For most of change ringing history, changes were also required to satisfy a second condition: In going from one row to another, no bell should move more than one position forward or backward within the row. Changes which do not satisfy this latter condition are known as jump changes . Methods using jump changes are still extremely rare, and so the explanation that follows will assume for the moment that we are dealing with changes which satisfy both of the conditions above. Suppose that we have two rows related by a change: A: 1 4 2 5 3 6 B: 4 1 2 3 5 6 How can we express the change succinctly? We might start by making a note of which bells do not change position between the two rows. In the above example, bells 2 and 6 are the only ones which remain fixed across the change. We could try simply writing down the numbers of the bells, but that would not be a sensible solution. To see why, look carefully at this other pair of rows related by a change: C: 6 5 4 3 2 1 D: 5 6 4 2 3 1 With a bit of scrutiny it should be apparent that the relationship between rows C and D is the same as that between rows A and B: if we were to relabel the bells in row C so as to match row A, then the row D obtained under the same relabelling would match row B. In other words, the change between rows A and B is the same as the change between rows C and D, even though the rows themselves are different. Our notation needs to express this fact in a fashion which is independent of the specific rows. Therefore, rather than look at the numbers of the bells which do not move between rows, we should pay heed to the position of those bells instead. Let's look again at the first example, this time making explicit note of how the bells move: A: 1 4 2 5 3 6 x | x | B: 4 1 2 3 5 6 As noted before, bells 2 and 6 are the only ones which stay in the same place, those places being 3 rd and 6 th within the row. Similarly, going from row C to row D, the bells in positions 3 and 6 are the only ones which don't move: C: 6 5 4 3 2 1 x | x | D: 5 6 4 2 3 1 In change ringing, a bell which stays in the same position between rows is said to make a place in that position. Place notation is so named because it expresses changes exclusively in terms of which places are made between rows. The fact that the bells which make places uniquely define a change is due to the constraints we placed upon changes to begin with. When changing between rows, there are only two possible behaviours allowed of any bell: it can either remain where it is, or it can swap places with a bell next to it. Therefore, all bells which do not make places must swap with their neighbours, and so this information is in a sense already accounted for by simply noting the bells which do make places. Place notation elements and strings To represent a change, we list the positions of the bells which make places between two rows in numerical order. The change in the examples above would be written as 36 . This is an element of place notation (sometimes also called a unit ): a single change represented in place notational form. The reason place notation is so useful is because changes on arbitrary numbers of bells can be uniquely defined using single elements, which are very compact and easy to work with. Furthermore, representing changes as strings of numbers allows them to be communicated to a computer. Here are some more example changes and the place notation elements which represent them: 1 3 2 5 4 6 | | x x 1 3 5 2 6 4 Place notation: 12 1 3 5 7 2 4 6 8 | x | | x | 1 5 3 7 2 6 4 8 Place notation: 1458 1 2 3 4 5 6 7 8 9 0 x | x x | | | 2 1 3 5 4 7 6 8 9 0 Place notation: 3890 There is a special type of change possible on even numbers of bells in which no bell makes a place between rows. For example: 1 2 3 4 5 6 x x x 2 1 4 3 6 5 This change is sometimes called the cross change for obvious reasons, and is notated using the special element - (or x ). To perform a method, several changes must be made one after the other in sequence. To use place notation to write methods, we need a way of concatenating place notation elements together. A string of place notation is a series of elements written in sequence. To avoid ambiguity about the boundaries between elements, dots . are added between any two elements which are not the cross change. For example, the sequence of changes in which change 14 is followed by change 36 , which is followed by change 1458 , would be written 14.36.1458 . It is not necessary to use dots to mark the bounds of the cross change: replacing 36 with the cross change in the former example would give 14-1458 . This simple notation is already powerful enough to uniquely express every \"conventional\" method that has ever been rung. For example, here are some place notation strings corresponding to a single lead of some well known methods: -16-16-16-16-16-12 Plain Bob Minor -36-14-12-36-14-56-14-36-12-14-36-12 Cambridge Surprise Minor -58-14.58-58.36.14-14.58-14-18-14-58.14-14.36.58-58.14-58-18 Bristol Surprise Major Condensed place notation Since methods can have leads which are (in theory) any finite length, place notation strings can become rather long and cumbersome when written out in full. However, for the vast majority of methods we may leverage their inherent symmetry to produce a condensed form of the place notation. The very significant majority of named methods are palindromic , which means that their sequence of changes is the same when reversed. If we examine the place notation of the three methods above we can see that, if we ignore the final elements in each case, the remaining strings are all symmetrical about the element at the halfway point. For example, take Cambridge Surprise Minor: -36-14-12-36-14-56-14-36-12-14-36-(12) ^^ The lead has a symmetry point at the change 56 (and also at the final change 12 , if you want to be picky). This means that this place notation string is about twice as long as it needs to be, because all the changes in the second half are already expressed in the first half in reverse order. We can now introduce the convention that a comma , within a place notation string separates any palindromic substrings . With this convention, the place notation for Cambridge becomes -36-14-12-36-14-56,12 The full place notation can be obtained from the condensed form by way of the following steps: List the elements before the comma from left to right; List the elements before the comma from right to left; Join the strings obtained from steps 1 and 2 together at the repeated element; Repeat steps 1 and 2 for the section after the comma; Concatenate the strings obtained from steps 3 and 5. Writing these steps out for our example, we have: Step 1: List the elements before the comma from left to right. -36-14-12-36-14-56 Step 2: List the elements before the comma from right to left. 56-14-36-12-14-36- Step 3: Join the strings obtained from steps 1 and 2 together at the repeated element. -36-14-12-36-14-56-14-36-12-14-36- Step 4: Repeat steps 1 and 2 for the section after the comma. 12 Step 5: Concatenate the strings obtained from steps 3 and 5. -36-14-12-36-14-56-14-36-12-14-36-12 And we are done. Step 4 seems somewhat trivial in this example because the substring after the comma in the condensed place notation has only a single element. However, it is crucial that both substrings be treated as palindromic for this convention to work. This is because there are many palindromic methods which have their points of symmetry in a different place. The best example of this is Grandsire, in which the point of palindromic symmetry is offset from the midpoint of the lead. The full place notation for a lead of Grandsire Doubles is 3.1.5.1.5.1.5.1.5.1 which condenses to 3,1.5.1.5.1 Alternative notational conventions When creating a custom method on Complib, you may use either the full or condensed form of the notation as specified above. You can use either - or x (or a mixture of both!) to represent the cross change. Complib will automatically condense the notation when validating the method, provided that the place notation itself is valid. There are other conventions for writing place notation, many of which are still very common. For the sake of convenience, here are a few you are most likely to encounter. Ampersand notation An ampersand & at the start of a place notation string is used to indicate that the string which follows is palindromic about its last element. This is similar to the comma notation. For example, &-16-14 represents the same string as -16-14, . Leadhead change A place notation element prefixed lh or le , or sometimes simply separated from the main string by a space, is used to denote the leadhead (or leadend ) change. This is most often used in conjunction with ampersand notation. Sometimes the actual leadhead row will be given rather than the place notation element. In order to obtain the terminal element, you will need to work out what change must be made at the end of the lead to get to the specified row. Leadhead codes Many commonly rung methods have Plain Bob leadheads, each of which has a special alphanumerical code at a given stage (see Leadhead codes ). Some conventions allow the use of a leadhead code instead of a terminal element of place notation. This is almost always used in conjunction with ampersand notation. For example, the place notation of Cambridge Surprise Minor is sometimes condensed as b &-36-14-12-36-14-56 which means the full string is palindromic about the element 56 , and the leadend change is the element which corresponds to the code b , which is 12 . This convention requires knowledge of the leadhead codes and which elements they represent, and so can be a little trickier to use. To learn about leadhead codes and how to use them, see the dedicated section . Jump changes","title":"Place notation"},{"location":"methods/place_notation/#place-notation","text":"All change ringing is concerned with taking a certain ordering of bells, called a row , and generating a new row from it according to rules. A method can be thought of as a set of these rules applied in sequence. In practice there are many different ways that methods can be written down. Most frequently they are represented visually as a blue line diagram , which can aid in memorisation. Some methods can be learned according to a rule such as \"first, treble-bob, last, near, full, far...\" which expresses the blue line concisely as a short phrase. However, in order to refer to a specific method uniquely , it is necessary to have a compact way of expressing what exactly every bell does while ringing it. Place notation is a tool invented in order to do just that.","title":"Place notation"},{"location":"methods/place_notation/#the-basic-concept","text":"First, let us recall some definitions: Row An ordering of the bells 1 to N , where N is the total number of bells being rung. A row is written in ringing order left to right. Each bell rings once and only once within a row. For example: 1 3 5 2 4 6 is a row; 9 8 7 6 5 4 3 2 1 is a row; 1 1 3 4 7 8 is not a row (why?). Change The action of moving from one row to another by altering the order of the bells; or, the relationship between two rows in terms of how they differ. (NB: A change can also be another name for a row, which can be a little confusing, though the meaning is usually clear in context.) In order to qualify as a change, the following condition must be satisfied: The two rows must have the same number of bells. For most of change ringing history, changes were also required to satisfy a second condition: In going from one row to another, no bell should move more than one position forward or backward within the row. Changes which do not satisfy this latter condition are known as jump changes . Methods using jump changes are still extremely rare, and so the explanation that follows will assume for the moment that we are dealing with changes which satisfy both of the conditions above. Suppose that we have two rows related by a change: A: 1 4 2 5 3 6 B: 4 1 2 3 5 6 How can we express the change succinctly? We might start by making a note of which bells do not change position between the two rows. In the above example, bells 2 and 6 are the only ones which remain fixed across the change. We could try simply writing down the numbers of the bells, but that would not be a sensible solution. To see why, look carefully at this other pair of rows related by a change: C: 6 5 4 3 2 1 D: 5 6 4 2 3 1 With a bit of scrutiny it should be apparent that the relationship between rows C and D is the same as that between rows A and B: if we were to relabel the bells in row C so as to match row A, then the row D obtained under the same relabelling would match row B. In other words, the change between rows A and B is the same as the change between rows C and D, even though the rows themselves are different. Our notation needs to express this fact in a fashion which is independent of the specific rows. Therefore, rather than look at the numbers of the bells which do not move between rows, we should pay heed to the position of those bells instead. Let's look again at the first example, this time making explicit note of how the bells move: A: 1 4 2 5 3 6 x | x | B: 4 1 2 3 5 6 As noted before, bells 2 and 6 are the only ones which stay in the same place, those places being 3 rd and 6 th within the row. Similarly, going from row C to row D, the bells in positions 3 and 6 are the only ones which don't move: C: 6 5 4 3 2 1 x | x | D: 5 6 4 2 3 1 In change ringing, a bell which stays in the same position between rows is said to make a place in that position. Place notation is so named because it expresses changes exclusively in terms of which places are made between rows. The fact that the bells which make places uniquely define a change is due to the constraints we placed upon changes to begin with. When changing between rows, there are only two possible behaviours allowed of any bell: it can either remain where it is, or it can swap places with a bell next to it. Therefore, all bells which do not make places must swap with their neighbours, and so this information is in a sense already accounted for by simply noting the bells which do make places.","title":"The basic concept"},{"location":"methods/place_notation/#place-notation-elements-and-strings","text":"To represent a change, we list the positions of the bells which make places between two rows in numerical order. The change in the examples above would be written as 36 . This is an element of place notation (sometimes also called a unit ): a single change represented in place notational form. The reason place notation is so useful is because changes on arbitrary numbers of bells can be uniquely defined using single elements, which are very compact and easy to work with. Furthermore, representing changes as strings of numbers allows them to be communicated to a computer. Here are some more example changes and the place notation elements which represent them: 1 3 2 5 4 6 | | x x 1 3 5 2 6 4 Place notation: 12 1 3 5 7 2 4 6 8 | x | | x | 1 5 3 7 2 6 4 8 Place notation: 1458 1 2 3 4 5 6 7 8 9 0 x | x x | | | 2 1 3 5 4 7 6 8 9 0 Place notation: 3890 There is a special type of change possible on even numbers of bells in which no bell makes a place between rows. For example: 1 2 3 4 5 6 x x x 2 1 4 3 6 5 This change is sometimes called the cross change for obvious reasons, and is notated using the special element - (or x ). To perform a method, several changes must be made one after the other in sequence. To use place notation to write methods, we need a way of concatenating place notation elements together. A string of place notation is a series of elements written in sequence. To avoid ambiguity about the boundaries between elements, dots . are added between any two elements which are not the cross change. For example, the sequence of changes in which change 14 is followed by change 36 , which is followed by change 1458 , would be written 14.36.1458 . It is not necessary to use dots to mark the bounds of the cross change: replacing 36 with the cross change in the former example would give 14-1458 . This simple notation is already powerful enough to uniquely express every \"conventional\" method that has ever been rung. For example, here are some place notation strings corresponding to a single lead of some well known methods: -16-16-16-16-16-12 Plain Bob Minor -36-14-12-36-14-56-14-36-12-14-36-12 Cambridge Surprise Minor -58-14.58-58.36.14-14.58-14-18-14-58.14-14.36.58-58.14-58-18 Bristol Surprise Major","title":"Place notation elements and strings"},{"location":"methods/place_notation/#condensed-place-notation","text":"Since methods can have leads which are (in theory) any finite length, place notation strings can become rather long and cumbersome when written out in full. However, for the vast majority of methods we may leverage their inherent symmetry to produce a condensed form of the place notation. The very significant majority of named methods are palindromic , which means that their sequence of changes is the same when reversed. If we examine the place notation of the three methods above we can see that, if we ignore the final elements in each case, the remaining strings are all symmetrical about the element at the halfway point. For example, take Cambridge Surprise Minor: -36-14-12-36-14-56-14-36-12-14-36-(12) ^^ The lead has a symmetry point at the change 56 (and also at the final change 12 , if you want to be picky). This means that this place notation string is about twice as long as it needs to be, because all the changes in the second half are already expressed in the first half in reverse order. We can now introduce the convention that a comma , within a place notation string separates any palindromic substrings . With this convention, the place notation for Cambridge becomes -36-14-12-36-14-56,12 The full place notation can be obtained from the condensed form by way of the following steps: List the elements before the comma from left to right; List the elements before the comma from right to left; Join the strings obtained from steps 1 and 2 together at the repeated element; Repeat steps 1 and 2 for the section after the comma; Concatenate the strings obtained from steps 3 and 5. Writing these steps out for our example, we have: Step 1: List the elements before the comma from left to right. -36-14-12-36-14-56 Step 2: List the elements before the comma from right to left. 56-14-36-12-14-36- Step 3: Join the strings obtained from steps 1 and 2 together at the repeated element. -36-14-12-36-14-56-14-36-12-14-36- Step 4: Repeat steps 1 and 2 for the section after the comma. 12 Step 5: Concatenate the strings obtained from steps 3 and 5. -36-14-12-36-14-56-14-36-12-14-36-12 And we are done. Step 4 seems somewhat trivial in this example because the substring after the comma in the condensed place notation has only a single element. However, it is crucial that both substrings be treated as palindromic for this convention to work. This is because there are many palindromic methods which have their points of symmetry in a different place. The best example of this is Grandsire, in which the point of palindromic symmetry is offset from the midpoint of the lead. The full place notation for a lead of Grandsire Doubles is 3.1.5.1.5.1.5.1.5.1 which condenses to 3,1.5.1.5.1","title":"Condensed place notation"},{"location":"methods/place_notation/#alternative-notational-conventions","text":"When creating a custom method on Complib, you may use either the full or condensed form of the notation as specified above. You can use either - or x (or a mixture of both!) to represent the cross change. Complib will automatically condense the notation when validating the method, provided that the place notation itself is valid. There are other conventions for writing place notation, many of which are still very common. For the sake of convenience, here are a few you are most likely to encounter. Ampersand notation An ampersand & at the start of a place notation string is used to indicate that the string which follows is palindromic about its last element. This is similar to the comma notation. For example, &-16-14 represents the same string as -16-14, . Leadhead change A place notation element prefixed lh or le , or sometimes simply separated from the main string by a space, is used to denote the leadhead (or leadend ) change. This is most often used in conjunction with ampersand notation. Sometimes the actual leadhead row will be given rather than the place notation element. In order to obtain the terminal element, you will need to work out what change must be made at the end of the lead to get to the specified row. Leadhead codes Many commonly rung methods have Plain Bob leadheads, each of which has a special alphanumerical code at a given stage (see Leadhead codes ). Some conventions allow the use of a leadhead code instead of a terminal element of place notation. This is almost always used in conjunction with ampersand notation. For example, the place notation of Cambridge Surprise Minor is sometimes condensed as b &-36-14-12-36-14-56 which means the full string is palindromic about the element 56 , and the leadend change is the element which corresponds to the code b , which is 12 . This convention requires knowledge of the leadhead codes and which elements they represent, and so can be a little trickier to use. To learn about leadhead codes and how to use them, see the dedicated section .","title":"Alternative notational conventions"},{"location":"methods/place_notation/#jump-changes","text":"","title":"Jump changes"},{"location":"search/basic/","text":"Searching Complib Search by title (basic search) Search by filter (advanced search)","title":"Search by title or filter"},{"location":"search/basic/#searching-complib","text":"","title":"Searching Complib"},{"location":"search/basic/#search-by-title-basic-search","text":"","title":"Search by title (basic search)"},{"location":"search/basic/#search-by-filter-advanced-search","text":"","title":"Search by filter (advanced search)"},{"location":"search/extended/","text":"Extended search A quick search allows you to search the method, composition and collections libraries by title. An advanced search allows you to specify a large number of filters in order to find methods and compositions with specified properties. However, neither method is able to test compositions and methods against each other. This requires an extended search . Note The ability to perform extended searches is restricted to Power Users .","title":"Extended search"},{"location":"search/extended/#extended-search","text":"A quick search allows you to search the method, composition and collections libraries by title. An advanced search allows you to specify a large number of filters in order to find methods and compositions with specified properties. However, neither method is able to test compositions and methods against each other. This requires an extended search . Note The ability to perform extended searches is restricted to Power Users .","title":"Extended search"}]}